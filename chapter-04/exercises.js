////////////////////////////////////////////////////////////////////////////////
// range ///////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

//I: start, end
//O: array containing all the numbers from start up to and including end
//C:
//E:

function range(start, end, step = 1) {
  //init emtpy array
  let result = [];

  //if start and end are the same
  if(start === end) {
    return result;
  }

  //positive step values
  if(step > 0) {
    for(let i = start; i <= end; i += step) {
      result.push(i);
    }
  //neg step values
  } else if ( step < 0) {
    for(let i = start; i >= end; i += step) {
      result.push(i);
    }
  }
  return result;
}



////////////////////////////////////////////////////////////////////////////////
// sum /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

//I: array of numbers
//O: returns the sum of these numbers
//C:
//E:

function sum(array) {
  //init sum
  let total = 0;

  //add each number in array to total
  for(let number of array) {
    total += number;
  }
  return total;
}

////////////////////////////////////////////////////////////////////////////////
// reverseArray ////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArray(array) {
  let output = [];

  for(let i = array.length - 1; i >= 0; i--) {
    output.push(array[i]);
  }
  return output;

}

////////////////////////////////////////////////////////////////////////////////
// reverseArrayInPlace /////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArrayInPlace(array) {
  let left = 0;
  let right = array.length - 1;

  while(left < right) {
    //swap the ele of the left and right indices
    let temp = array[left];
    array[left] = array[right];
    array[right] = temp;
    //move toward the center
    left ++;
    right--;
  }
  return array;
}

////////////////////////////////////////////////////////////////////////////////
// arrayToList /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function arrayToList(array) {
  //start with empty list
  let list = null;
  //iterate backwards
  for(let i = array.length - 1; i>= 0; i--) {
    list = { value: array[i], rest: list };
  }
  return list;
}

////////////////////////////////////////////////////////////////////////////////
// listToArray /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function listToArray(list) {
  //init empty array
  let array = [];
  //iterate
  for(let node = list; node; node = node.rest) {
    //push into array
    array.push(node.value)
  }
  return array;
}

////////////////////////////////////////////////////////////////////////////////
// prepend /////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function prepend(element, list) {
  return {
    value: element,
    rest: list
  };
}

////////////////////////////////////////////////////////////////////////////////
// nth /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function nth(list, number) {
  if(list === null) {
    return undefined;
  } else if (number === 0) {
    return list.value;
  } else {
    return nth(list.rest, number - 1);
  }

}

////////////////////////////////////////////////////////////////////////////////
// deepEqual ///////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function deepEqual(a, b) {
  //check if both values are strictly equal
  if(a === b) {
    return true;
  }
  //check if either value is null or not an object
  if (a == null || b == null || typeof a !== 'object' || typeof b !== 'object') {
    return false;
  }
  //get keys of both objects
  let keysA = Object.keys(a);
  let keysB = Object.keys(b);

  //check if num of prop is diff
  if (keysA.length !== keysB.length) {
    return false;
  }

  //check if all props in a are in b
  for (let key of keysA) {
    if (!keysB.includes(key) || ! deepEqual(a[key], b[key])) {
      return false;
    }
  }

  return true;

}

////////////////////////////////////////////////////////////////////////////////
// DON'T REMOVE THIS CODE //////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

if ((typeof process !== 'undefined') &&
  (typeof process.versions.node !== 'undefined')) {
  module.exports = {
    range,
    sum,
    reverseArray,
    reverseArrayInPlace,
    arrayToList,
    listToArray,
    prepend,
    nth,
    deepEqual,
  };
};